const $ = el => document.querySelector(el)
const $$ = el => document.querySelectorAll(el)

let language = 'en';
let clearAppearFont = false;
if (localStorage.getItem("language") == 'ru') {
	language = 'ru';
	$('.color-theme-button').checked = false;
	ruTranslator();
}

//appear Font
function consoleFont(select, phrase, delay) {
	return new Promise(resolve => {
		const elem = $(select);
		let arrPhrase = phrase.split("");
		let i = 0;
		let delayRand = delay;

		let checkForDisableInterval = setInterval(() => {
			if (clearAppearFont) {
				clearInterval(int);
				clearInterval(checkForDisableInterval);
				clearAppearFont = false;
			}
		}, 1);

		let int = setInterval(function () {
			let delayRand = delay * 2;
			if (i < arrPhrase.length) elem.insertAdjacentHTML("beforeEnd", arrPhrase[i]);
			if (i >= arrPhrase.length) {
				clearInterval(int);
				clearInterval(checkForDisableInterval);
				resolve();
			}
			i++;

		}, delayRand);
	});
}

function flick(select) {
	let elem = $(select);
	let startElem = elem.innerHTML;
	let i = 0;

	let checkForDisableInterval = setInterval(() => {
		if (clearAppearFont) {
			clearInterval(fli);
			clearInterval(checkForDisableInterval);
			clearAppearFont = false;
		}
	}, 1);

	let fli = setInterval(function () {
		i % 2 == 0 ? elem.innerHTML = `${startElem}_` : elem.innerHTML = startElem
		i++;
	}, 550);
}

window.onload = () => language == 'en' ? startEnglishAppearFont() : startRussianAppearFont();

function ru() {
	language = 'ru';
	localStorage.setItem("language", 'ru');

	doClearAppearFont();
	ruTranslator();
}

function ruTranslator() {

	$('.switch-desk').innerText = 'Russian';
	$('.first-desc').innerText = 'Здесь собраны разные фичи и программы, которые я делал. Все сделано на нативном Javascript без использования jQuery или других библиотек.';

	$('section.tetris-section .definition > div.h2').innerText = 'Тетрис';
	$('.tetris-section .definition > div.desc').innerText = `Классический Тетрис. Выберите уровень сложности и игра начнётся. Управление на WASD или стрелками.`;
	$('.tetris-section > div > div > div.col-md-5.definition > div.complication > button.btn-compl.draw-border.easy').innerText = 'Легкий'
	$('.tetris-section > div > div > div.col-md-5.definition > div.complication > button.btn-compl.draw-border.normal').innerText = 'Средний'
	$('.tetris-section > div > div > div.col-md-5.definition > div.complication > button.btn-compl.draw-border.hard').innerText = 'Тяжёлый'

	$('.calculator-section > div > div > div.col-md-5 > div.h2').innerText = 'Калькулятор'
	$('.calculator-section > div > div > div.col-md-5 > div.desc').innerText = 'Калькулятор как на IOS.'

	$('section.snake-section div.h2').innerText = 'Змейка'
	$('section.snake-section div.desc').innerText = 'Выберите уровень сложности и игра начнётся.'
	$('.snake-section > div > div > div.col-md-5.anime-dis.definition > div.complication > button.btn-compl-snake.draw-border.easy').innerText = 'Легкий'
	$('.snake-section > div > div > div.col-md-5.anime-dis.definition > div.complication > button.btn-compl-snake.draw-border.normal').innerText = 'Средний'
	$('.snake-section > div > div > div.col-md-5.anime-dis.definition > div.complication > button.btn-compl-snake.draw-border.hard').innerText = 'Тяжелый'

	$('.cloth-section .h2').innerText = 'Симулятор ткани';
	$('.cloth-section .desc').innerText = 'Левая кнопка мыши, чтобы потянуть ткань, правая чтобы порвать.';
	$('.cloth-section div.complication button').innerText = 'Заново'

	$('.google-interview-section h2').innerText = 'Задача с Google собеседования'
	$('.google-interview-section > div > div > div.col-md-6 > div').innerHTML = `Решил задачу с <a href="https://www.youtube.com/watch?v=10WnvBk9sZc&t=2792s" target="_blank">Google
	собеседования</a>. Задача такая: нужно найти общую подпоследовательность(subsequence). Это
последовательность, которая может быть получена из другой последовательности путем удаления некоторых
элементов без изменения порядка оставшихся элементов. Задача сложнее чем кажется на первый взгляд. Я сам в
этом убедился. Я написал наивный код за 20 минут, который решил правильно все примеры, которые дал
интервьюер. И я подумал "Вау", я решил задачу за 20 минут, которую Сеньор программист решал целый час. Но
когда я стал делать более сложные тесты, то оказалась что это работает немного не так как нужно. В итоге я
потратил кучу часов и все таки сделал правильно.`
	$('.google-task-en').classList.add('google-task-ru');
	$('.google-interview-section > div > div > div.col-md-5.offset-md-1 > div > div:nth-child(1)').innerText = 'Первая строка:'
	$('.google-interview-section > div > div > div.col-md-5.offset-md-1 > div > div:nth-child(3)').innerText = 'Вторая строка:'
	$('.google-interview-section > div > div > div.col-md-5.offset-md-1 > div > button').innerText = 'Получить ответ';

	$('.lightning-section > div > div > div > h2').innerText = 'Эффект электрозаряда';

	$('.decoder-section > div > div:nth-child(1) > div > h2').innerText = 'Шифратор сообщений'
	$('.decoder-section > div > div:nth-child(1) > div > div').innerText = 'Вам нужно ввести любой текст в первый инпут и скрипт выдаст вам определённую последовательность цифр. Не думаю, что этот шифр можно разгадать, потому что на каждую букву несколько вариантов последовательности и разная длина.'
	$('.decoder-section > div > div:nth-child(2) > div.col-md-3.encoder-input-wrapper > h3').innerText = 'Ввод'
	$('.decoder-section > div > div:nth-child(2) > div.col-md-6.encoder-input-wrapper > h3').innerText = 'Шифр'
	$('.decoder-section > div > div:nth-child(2) > div.col-md-3.encoder-input-wrapper > h3.decoder-title').innerText = 'Дешифратор';
	$('.decoder-section > div > div:nth-child(2) > div.col-md-3.encoder-input-wrapper > div > button').innerText = 'Получить шифр'
	$('body > section.decoder-section > div > div:nth-child(2) > div.col-md-3.encoder-input-wrapper.anime-right > div > button').innerText = 'Расшифровать'

	$('.end-desc').innerText = 'Спасибо за просмотр'
}


function en() {
	language = 'en';
	localStorage.setItem("language", 'en');

	(async () => {
		await doClearAppearFont();
		await selectOnEnglishTitle();
		setTimeout(() => {
			flick(".hello");
		}, 300)
	})()

	$('.switch-desk').innerText = 'English';
	$('.first-desc').innerText = 'Here are collected various features and programs that I did. Everything is done on the native Javascript without using jQuery or other libraries.';

	$('section.tetris-section .definition > div.h2').innerText = 'Tetris';
	$('.tetris-section .definition > div.desc').innerText = `Classic Tetris. Choose the difficulty level and the game will begin. Control on WASD or arrows.`;
	$('.tetris-section > div > div > div.col-md-5.definition > div.complication > button.btn-compl.draw-border.easy').innerText = 'Easy'
	$('.tetris-section > div > div > div.col-md-5.definition > div.complication > button.btn-compl.draw-border.normal').innerText = 'Medium'
	$('.tetris-section > div > div > div.col-md-5.definition > div.complication > button.btn-compl.draw-border.hard').innerText = 'Hard'

	$('.calculator-section > div > div > div.col-md-5 > div.h2').innerText = 'Calculator'
	$('.calculator-section > div > div > div.col-md-5 > div.desc').innerText = 'Calculator like on iOS.'

	$('section.snake-section div.h2').innerText = 'Snake'
	$('section.snake-section div.desc').innerText = 'Choose the difficulty level and the game will begin.'
	$('.snake-section > div > div > div.col-md-5.anime-dis.definition > div.complication > button.btn-compl-snake.draw-border.easy').innerText = 'Easy'
	$('.snake-section > div > div > div.col-md-5.anime-dis.definition > div.complication > button.btn-compl-snake.draw-border.normal').innerText = 'Medium'
	$('.snake-section > div > div > div.col-md-5.anime-dis.definition > div.complication > button.btn-compl-snake.draw-border.hard').innerText = 'Hard'

	$('.cloth-section .h2').innerText = 'Simulation of cloth';
	$('.cloth-section .desc').innerText = 'Left mouse button to pull cloth, right mouse button to tear.';
	$('.cloth-section div.complication button').innerText = 'Repeat';

	$('.google-interview-section h2').innerText = 'Task from Google interview'
	$('.google-interview-section > div > div > div.col-md-6 > div').innerHTML = `Solved the task from <a href="https://www.youtube.com/watch?v=10WnvBk9sZc&t=2792s" target="_blank"> Google
	interview </a>. The task is this: you need to find a common subsequence. it
	a sequence that can be obtained from another sequence by removing some
	elements without changing the order of the remaining elements. The task is more complicated than it seems at first glance. I'm in
	convinced of this. I wrote a naive code in 20 minutes, which solved correctly all the examples that gave
	interviewer. And I thought “Wow”, I solved the problem in 20 minutes, which the Senior programmer solved for an hour. But
	when I began to do more complex tests, it turned out that this works a little wrong. I ended up
	spent a bunch of hours and still did it right.`
	$('.google-task-en').classList.remove('google-task-ru');
	$('.google-interview-section > div > div > div.col-md-5.offset-md-1 > div > div:nth-child(1)').innerText = 'First string'
	$('.google-interview-section > div > div > div.col-md-5.offset-md-1 > div > div:nth-child(3)').innerText = 'Second string'
	$('.google-interview-section > div > div > div.col-md-5.offset-md-1 > div > button').innerText = 'Get answer';

	$('.lightning-section > div > div > div > h2').innerText = 'Lightning';

	$('.decoder-section > div > div:nth-child(1) > div > h2').innerText = 'Message encoder'
	$('.decoder-section > div > div:nth-child(1) > div > div').innerText = 'You need to enter any text in the first input and the script will give you a certain sequence of numbers. I do not think that this cipher can be solved, because for each letter there are several variants of the sequence and different lengths.'
	$('.decoder-section > div > div:nth-child(2) > div.col-md-3.encoder-input-wrapper > h3').innerText = 'Input'
	$('.decoder-section > div > div:nth-child(2) > div.col-md-6.encoder-input-wrapper > h3').innerText = 'Cipher'
	$('.decoder-section > div > div:nth-child(2) > div.col-md-3.encoder-input-wrapper > h3.decoder-title').innerText = 'Decoder';
	$('.decoder-section > div > div:nth-child(2) > div.col-md-3.encoder-input-wrapper > div > button').innerText = 'Get cipher'
	$('body > section.decoder-section > div > div:nth-child(2) > div.col-md-3.encoder-input-wrapper.anime-right > div > button').innerText = 'Decode'

	$('.end-desc').innerText = 'Thanks for watching'
}

let lang = 0;
$('.switch-wrapper').onclick = () => {
	lang++
	if (lang % 2 == 0) {
		if (language == 'ru') {
			en();
		} else {
			ru();
			selectOnRussianTitle();
		}
	}
}

function doClearAppearFont() {
	clearAppearFont = true;
	setTimeout(() => {
		$('.hello').innerText = '';
		$('.workshop').innerText = '';
	}, 50);
}

function startEnglishAppearFont() {
	(async function () {
		await consoleFont(".hello ", "Welcome To My Library", 125);
		await flick(".hello");
	}());
}

function startRussianAppearFont() {
	(async function () {
		await consoleFont(".hello", "Добро пожаловать", 130);
		await consoleFont(".workshop ", "В мою библиотеку", 110);
		await flick(".workshop");
	}());
}

function selectOnRussianTitle() {
	setTimeout(() => {
		$('.hello').innerText = 'Добро пожаловать';
		$('.workshop').innerText = 'В мою библиотеку';
	}, 80);
}

function selectOnEnglishTitle() {
	setTimeout(() => {
		$('.hello').innerText = 'Welcome To My Library';
		$('.workshop').innerText = '';
	}, 80);

}


// Color End height
let pageHeight = document.documentElement.clientHeight;

$('.end-desc').style.paddingBottom = `${pageHeight / 2}px`;
$('.end-desc').style.marginTop = `${pageHeight / 2 + 30}px`;


window.onscroll = function (e) {
	let wScroll = document.documentElement.scrollTop;
	let pageHeight = document.documentElement.clientHeight;

	//opacity by appear
	if ($(".first-desc").getBoundingClientRect().top > 200) {
		$(".first-desc").style.opacity = Math.abs(
			$(".first-desc").getBoundingClientRect().top - pageHeight) / 300;
	}

	if ($(".first-desc").getBoundingClientRect().top < 200 &&
		$(".first-desc").getBoundingClientRect().top > - 1000) {
		$(".first-desc").style.opacity = ($(".first-desc").getBoundingClientRect().top + 100) / 200
	}

	// animate
	$$('.anime-dis').forEach(function (item) {
		if (item.getBoundingClientRect().top - (pageHeight - 0) < 0) item.classList.add('anime');
	})

	$$('.anime-right').forEach(function (item) {
		if (item.getBoundingClientRect().top - (pageHeight - 0) < 0) item.classList.add('anime');
	})

	$$('.anime-left').forEach(function (item) {
		if (item.getBoundingClientRect().top - (pageHeight - 0) < 0) item.classList.add('anime');
	})

	$$('.anime-second-dis').forEach(function (item) {
		if (item.getBoundingClientRect().top - (pageHeight - 0) < 0) {
			setTimeout(() => item.classList.add('anime'), 250)
		}
	})

	// end
	$$('.white-end').forEach(function (item) {
		if (item.getBoundingClientRect().top - (pageHeight / 1.8) < 0) {
			$('.end-desc').style.transition = `4.3s ease`;
			document.body.classList.add('wb');
			setTimeout(() => $('.end-desc').classList.add('edn-desc-see'), 1450)
		} else {
			document.body.classList.remove('wb');
			$('.end-desc').classList.remove('edn-desc-see');
		}
	})

	// document.querySelectorAll('.white-end').forEach(function (item) {
	// 	if (item.getBoundingClientRect().top - (pageHeight / 1.8) < 0) {
	// 		document.body.classList.add('wb');
	// 		setTimeout(function () {
	// 			document.querySelector('.end-desc').classList.add('edn-desc-see');
	// 		}, 1900)
	// 	} else {
	// 		document.body.classList.remove('wb');
	// 		document.querySelector('.end-desc').classList.remove('edn-desc-see');
	// 	}
	// })

	// if (localStorage.getItem("theme") == 0) {
	// 	document.querySelectorAll('.white-end').forEach(function (item) {
	// 		if (item.getBoundingClientRect().top - (pageHeight / 1.8) < 0) {
	// 			document.querySelector('.end-desc').style.transition = `4.3s ease`;
	// 			document.body.classList.add('wb');
	// 			setTimeout(function () {
	// 				document.querySelector('.end-desc').classList.add('edn-desc-see');
	// 			}, 1900)
	// 		} else {
	// 			document.body.classList.remove('wb');
	// 			document.querySelector('.end-desc').classList.remove('edn-desc-see');
	// 		}
	// 	})
	// }

	// if (localStorage.getItem("theme") == 1) {
	// 	document.querySelectorAll('.white-end').forEach(function (item) {
	// 		if (item.getBoundingClientRect().top - (pageHeight / 1.8) < 0) {
	// 			document.body.classList.add('wb-white');
	// 			setTimeout(function () {
	// 				document.querySelector('.end-desc-white').classList.add('edn-desc-see');
	// 			}, 1900)
	// 		} else {
	// 			document.body.classList.remove('wb-white');
	// 			document.querySelector('.end-desc-white').classList.remove('edn-desc-see');
	// 		}
	// 	})
	// }



}

// //Color Theme
// if (localStorage.getItem("theme-libr") == 1) {
// 	colorThemeChanger();
// 	document.querySelector('.color-theme-button').checked = false;
// }

// const switchB = document.querySelectorAll('.switch-b input').forEach(function (item) {
// 	item.onchange = function () {
// 		colorThemeChanger();
// 		localStorage.getItem("theme-libr") == 0 ? localStorage.setItem("theme-libr", 1) : localStorage.setItem("theme-libr", 0);
// 	}
// });

// function colorThemeChanger() {
// 	document.querySelector('body').classList.toggle('white-bg');
// 	document.querySelector('body').classList.toggle('scroll-white');
// 	document.querySelectorAll('.draw-border').forEach(item => {
// 		item.classList.toggle('draw-border-white');
// 	})
// 	document.querySelector('.draw-border-google').classList.toggle('draw-border-white');
// 	document.querySelector('.draw-border-cloth').classList.toggle('draw-border-white');
// 	document.querySelector('.input-tetris').classList.toggle('input-tetris-white')
// 	document.querySelector('.input-snake').classList.toggle('input-snake-white')
// 	document.querySelectorAll('.google-input').forEach(item => {
// 		item.classList.toggle('input-white');
// 	})
// 	document.querySelector('.canvas').classList.toggle('canvas-white');


// }

if (document.documentElement.clientWidth < 900) {
	if (language == 'ru') {
		alert('Вы используете мобильную версию сайта, не все фичи тут будут работать правильно.')
	} else {
		alert('You are using a mobile version of the site, not all features here will work correctly')
	}
}


// Scroll
function dirScroll(el, pos) {
	pos < el.getBoundingClientRect().top ? scroll(el, 1, pos) : scroll(el, -1, pos)
}

function scroll(el, direction, pos) {
	let requestAnimationFrame = window.requestAnimationFrame ||
		window.mozRequestAnimationFrame ||
		window.webkitRequestAnimationFrame ||
		window.msRequestAnimationFrame;
	window.requestAnimationFrame = requestAnimationFrame;

	const pageHeight = Math.max(
		document.body.scrollHeight, document.documentElement.scrollHeight,
		document.body.offsetHeight, document.documentElement.offsetHeight,
		document.body.clientHeight, document.documentElement.clientHeight
	);

	let duration = 2000,
		start = new Date().getTime();

	let fn = function () {
		let top = el.getBoundingClientRect().top - pos,
			now = new Date().getTime() - start,
			result = Math.round(top * now / duration);

		result = (result > direction * top) ? top : (result == 0) ? direction : result;

		if (direction * top > 0 && (pageHeight - window.pageYOffset) > direction * document.documentElement.clientHeight) {
			window.scrollBy(0, result);
			requestAnimationFrame(fn);
		}
	}
	requestAnimationFrame(fn);
}


// Tetris

tetrisIsCall = false;

// tetris complication
$$('.btn-compl').forEach(function (item, i, arr) {
	item.addEventListener('click', function (e) {
		let speed;

		if (!tetrisIsCall) {

			if (e.target.classList.contains('easy')) speed = 900;
			if (e.target.classList.contains('normal')) speed = 450;
			if (e.target.classList.contains('hard')) speed = 225;

			arr.forEach(it => it.classList.remove('btn-pressed'))

			item.classList.add('btn-pressed');

			// disable scroll on arrows
			document.onkeydown = function (e) {
				if ([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {
					e = e || window.event;
					if (e.preventDefault) e.preventDefault();
					e.returnValue = false;
					return false;
				}
			}

			dirScroll($('.main'), 50);

			startGame(speed);
			tetrisIsCall = true;
		}
	});
});


function drawTetris() {
	let overlay = $('.overlay');
	let modal = $('.modal');

	let tetris = document.createElement('div');
	tetris.classList.add('tetris');

	for (let i = 1; i < 181; i++) {
		let excel = document.createElement('div');
		excel.classList.add('excel');
		tetris.appendChild(excel);
	}

	let main = $$('.main')[0];
	main.appendChild(tetris);

	let excel = $$('.excel');
	let x = 1,
		y = 18;

	for (let i = 0; i < excel.length; i++) {
		if (x > 10) {
			x = 1;
			y--;
		}
		excel[i].setAttribute('posX', x);
		excel[i].setAttribute('posY', y);
		x++;
	}
}

drawTetris();

function startGame(speed) {

	for (let z = 1; z < 11; z++) {
		for (let m = 1; m < 16; m++) {
			$(`[posX = "${z}"][posY = "${m}"]`).classList.remove('set')
		}
	}

	let done = false;
	let overlay = $('.overlay');
	let modal = $('.modal');

	//creating field
	let tetris = document.createElement('div');
	tetris.classList.add('tetris');

	//creating figures
	let a = 5, b = 15;

	let mainArr = [

		//палка
		[
			[0, 1],
			[0, 2],
			[0, 3],
			[
				[-1, 1],
				[0, 0],
				[1, -1],
				[2, -2]
			],
			[
				[1, -1],
				[0, 0],
				[-1, 1],
				[-2, 2]
			],
			[
				[-1, 1],
				[0, 0],
				[1, -1],
				[2, -2]
			],
			[
				[1, -1],
				[0, 0],
				[-1, 1],
				[-2, 2]
			]
		],
		//квадрат
		[
			[1, 0],
			[0, 1],
			[1, 1],
			[
				[0, 0],
				[0, 0],
				[0, 0],
				[0, 0]
			],
			[
				[0, 0],
				[0, 0],
				[0, 0],
				[0, 0]
			],
			[
				[0, 0],
				[0, 0],
				[0, 0],
				[0, 0]
			],
			[
				[0, 0],
				[0, 0],
				[0, 0],
				[0, 0]
			]
		],
		//буква L
		[
			[1, 0],
			[0, 1],
			[0, 2],
			[
				[0, 0],
				[-1, 1],
				[1, 0],
				[2, -1]
			],
			[
				[1, -1],
				[1, -1],
				[-1, 0],
				[-1, 0]
			],
			[
				[-1, 0],
				[0, -1],
				[2, -2],
				[1, -1]
			],
			[
				[0, -1],
				[0, -1],
				[-2, 0],
				[-2, 0]
			]
		],
		//буква L зеркальная
		[
			[1, 0],
			[1, 1],
			[1, 2],
			[
				[0, 0],
				[0, 0],
				[1, -1],
				[-1, -1]
			],
			[
				[0, -1],
				[-1, 0],
				[-2, 1],
				[1, 0]
			],
			[
				[2, 0],
				[0, 0],
				[1, -1],
				[1, -1]
			],
			[
				[-2, 0],
				[1, -1],
				[0, 0],
				[-1, 1]
			]
		],
		//молния нижний ряд вправо
		[
			[1, 0],
			[-1, 1],
			[0, 1],
			[
				[0, -1],
				[-1, 0],
				[2, -1],
				[1, 0]
			],
			[
				[0, 0],
				[1, -1],
				[-2, 0],
				[-1, -1]
			],
			[
				[0, -1],
				[-1, 0],
				[2, -1],
				[1, 0]
			],
			[
				[0, 0],
				[1, -1],
				[-2, 0],
				[-1, -1]
			]
		],
		//молния нижний ряд влево
		[
			[1, 0],
			[1, 1],
			[2, 1],
			[
				[2, -1],
				[0, 0],
				[1, -1],
				[-1, 0]
			],
			[
				[-2, 0],
				[0, -1],
				[-1, 0],
				[1, -1]
			],
			[
				[2, -1],
				[0, 0],
				[1, -1],
				[-1, 0]
			],
			[
				[-2, 0],
				[0, -1],
				[-1, 0],
				[1, -1]
			]
		],
		//деталь лего
		[
			[1, 0],
			[2, 0],
			[1, 1],
			[
				[1, -1],
				[0, 0],
				[0, 0],
				[0, 0]
			],
			[
				[0, 0],
				[-1, 0],
				[-1, 0],
				[1, -1]
			],
			[
				[1, -1],
				[1, -1],
				[1, -1],
				[0, 0]
			],
			[
				[-2, 0],
				[0, -1],
				[0, -1],
				[-1, -1]
			]
		]
	];


	let currentFigure = 0, figureBody = 0, rotate = 1;

	function create() {
		getRandom = () => Math.round(Math.random() * (mainArr.length - 1));

		rotate = 1;
		currentFigure = getRandom();

		figureBody = [
			$(`[posX = "${a}"][posY = "${b}"]`),
			$(`[posX = "${a + mainArr[currentFigure][0][0]}"][posY = "${b + mainArr[currentFigure][0][1]}"]`),
			$(`[posX = "${a + mainArr[currentFigure][1][0]}"][posY = "${b + mainArr[currentFigure][1][1]}"]`),
			$(`[posX = "${a + mainArr[currentFigure][2][0]}"][posY = "${b + mainArr[currentFigure][2][1]}"]`),
		]

		for (let i = 0; i < figureBody.length; i++) figureBody[i].classList.add('figure');
	}

	create();

	let score = 0;
	let input = $('.input-tetris');
	if (language == 'ru') input.value = `Ваш счет: ${score}`;
	if (language == 'en') input.value = `Your score: ${score}`;


	function move() {
		if (language == 'ru') input.value = `Ваш счет: ${score}`;
		if (language == 'en') input.value = `Your score: ${score}`;

		let moveFlag = true;
		let coordinates = [
			[figureBody[0].getAttribute('posX'), figureBody[0].getAttribute('posY')],
			[figureBody[1].getAttribute('posX'), figureBody[1].getAttribute('posY')],
			[figureBody[2].getAttribute('posX'), figureBody[2].getAttribute('posY')],
			[figureBody[3].getAttribute('posX'), figureBody[3].getAttribute('posY')],
		];

		for (let i = 0; i < coordinates.length; i++) {
			if (coordinates[i][1] == 1 ||
				$(`[posX = "${coordinates[i][0]}"][posY = "${coordinates[i][1] - 1}"]`)
					.classList.contains('set')) {
				moveFlag = false;
				break;
			}
		}

		if (moveFlag) {
			for (let i = 0; i < figureBody.length; i++) figureBody[i].classList.remove('figure');

			figureBody = [
				$(`[posX = "${coordinates[0][0]}"][posY = "${coordinates[0][1] - 1}"]`),
				$(`[posX = "${coordinates[1][0]}"][posY = "${coordinates[1][1] - 1}"]`),
				$(`[posX = "${coordinates[2][0]}"][posY = "${coordinates[2][1] - 1}"]`),
				$(`[posX = "${coordinates[3][0]}"][posY = "${coordinates[3][1] - 1}"]`),
			];
			for (let i = 0; i < figureBody.length; i++) figureBody[i].classList.add('figure');

		} else {
			for (let i = 0; i < figureBody.length; i++) {
				figureBody[i].classList.remove('figure');
				figureBody[i].classList.add('set');
			}
			for (let i = 1; i < 15; i++) {
				let count = 0;
				for (let k = 1; k < 11; k++) {
					if ($('[posX = "' + k + '"][posY = "' + i + '"]').classList.contains('set')) {
						count++;
						if (count == 10) {
							score += 10;
							if (language == 'ru') input.value = `Ваш счет: ${score}`;
							if (language == 'en') input.value = `Your score: ${score}`;

							for (let m = 1; m < 11; m++) {
								$(`[posX = "${m}"][posY = "${i}"]`).classList.remove('set')
							}
							let set = $$('.set');
							let newSet = [];
							for (let s = 0; s < set.length; s++) {
								let setCoordinates = [set[s].getAttribute('posX'), set[s].getAttribute('posY')]
								if (setCoordinates[1] > i) {
									set[s].classList.remove('set');
									newSet.push($(`[posX = "${setCoordinates[0]}"][posY = "${
										setCoordinates[1] - 1}"]`));
								}
							}
							for (let z = 0; z < newSet.length; z++) newSet[z].classList.add('set');
							i--;
						}
					}

				}
			}
			for (let n = 1; n < 11; n++) {
				if ($(`[posX = "${n}"][posY = "15"]`).classList.contains('set')) {
					clearInterval(interval);
					if (language == 'en') alert(`Game over. Your score: ${score}.`);
					if (language == 'ru') alert(`Игра окончена. Ваш Счёт: ${score}.`);

					done = true;

					tetrisIsCall = false;

					//enable scroll
					document.onkeydown = null;

					for (let z = 1; z < 11; z++) {
						for (let m = 1; m < 16; m++) {
							$(`[posX = "${z}"][posY = "${m}"]`).classList.remove('set')
						}
					}

					break;
				}
			}
			create();
		}
	}

	let interval = setInterval(() => move(), speed);

	let flag = true;

	window.addEventListener('keydown', function (e) {
		let coordinates1 = [figureBody[0].getAttribute('posX'), figureBody[0].getAttribute('posY')];
		let coordinates2 = [figureBody[1].getAttribute('posX'), figureBody[1].getAttribute('posY')];
		let coordinates3 = [figureBody[2].getAttribute('posX'), figureBody[2].getAttribute('posY')];
		let coordinates4 = [figureBody[3].getAttribute('posX'), figureBody[3].getAttribute('posY')];

		function getNewState(a) {

			flag = true;

			let figureNew = [
				$(`[posX = "${+coordinates1[0] + a}"][posY = "${+coordinates1[1]}"]`),
				$(`[posX = "${+coordinates2[0] + a}"][posY = "${+coordinates2[1]}"]`),
				$(`[posX = "${+coordinates3[0] + a}"][posY = "${+coordinates3[1]}"]`),
				$(`[posX = "${+coordinates4[0] + a}"][posY = "${+coordinates4[1]}"]`),
			];

			for (let i = 0; i < figureNew.length; i++) {
				if (!figureNew[i] || figureNew[i].classList.contains('set')) flag = false;
			}

			if (flag == true) {
				for (let i = 0; i < figureBody.length; i++) {
					figureBody[i].classList.remove('figure');
				}

				figureBody = figureNew;

				for (let i = 0; i < figureBody.length; i++) {
					figureBody[i].classList.add('figure');
				}
			}
		}
		if (!done) {
			if (e.keyCode == 65 || e.keyCode == 37) getNewState(-1);
			if (e.keyCode == 68 || e.keyCode == 39) getNewState(1);
			if (e.keyCode == 83 || e.keyCode == 40) move();
			if (e.keyCode == 87 || e.keyCode == 38) {
				flag = true;

				let figureNew = [
					$(`[posX = "${+coordinates1[0] + mainArr[currentFigure][rotate + 2][0][0]}"][posY = "${
						+coordinates1[1] + mainArr[currentFigure][rotate + 2][0][1]}"]`),

					$(`[posX = "${+coordinates2[0] + mainArr[currentFigure][rotate + 2][1][0]}"][
										posY = "${+coordinates2[1] + mainArr[currentFigure][rotate + 2][1][1]}"]`),

					$(`[posX = "${+coordinates3[0] + mainArr[currentFigure][rotate + 2][2][0]}"][
										posY = "${+coordinates3[1] + mainArr[currentFigure][rotate + 2][2][1]}"]`),

					$(`[posX = "${+coordinates4[0] + mainArr[currentFigure][rotate + 2][3][0]}"][
										posY = "${+coordinates4[1] + mainArr[currentFigure][rotate + 2][3][1]}"]`),
				];

				for (let i = 0; i < figureNew.length; i++) {
					if (!figureNew[i] || figureNew[i].classList.contains('set')) flag = false;
				}

				if (flag == true) {
					for (let i = 0; i < figureBody.length; i++) figureBody[i].classList.remove('figure');
					figureBody = figureNew;
					for (let i = 0; i < figureBody.length; i++) figureBody[i].classList.add('figure')
				}

				rotate < 4 ? rotate++ : rotate = 1;
			}
		}
	})
}


//Calculator

(function calculator() {
	const oneBtn = $("#calc-one")
		, twoBtn = $("#calc-two")
		, threeBtn = $("#calc-three")
		, fourBtn = $("#calc-four")
		, fiveBtn = $("#calc-five")
		, sixBtn = $("#calc-six")
		, sevenBtn = $("#calc-seven")
		, eightBtn = $("#calc-eight")
		, nineBtn = $("#calc-nine")
		, tenBtn = $("#calc-ten");

	const decimalBtn = $("#calc-decimal")
		, clearBtn = $("#calc-clear")
		, backspaceBtn = $("#calc-backspace")
		, displayValElement = $("#calc-display-val")

	let displayVal = '0';
	let pendingVal;
	let evalStringArray = [];

	const calcNumBtns = $$(".calc-btn-num");
	const calcOperatorBtns = $$('.calc-btn-operator');


	let updateDisplayVal = (clickObj) => {
		let btnText = clickObj.target.innerText;

		if (displayVal === '0') displayVal = '';
		6
		displayVal += btnText;
		displayValElement.innerText = displayVal;
	}

	let perfomOperation = (clickObj) => {

		switch (clickObj.target.innerText) {
			case '+':
				pendingVal = displayVal;
				displayVal = '0';
				displayValElement.innerText = displayVal;
				evalStringArray.push(pendingVal);
				evalStringArray.push('+');
				break;

			case '-':
				pendingVal = displayVal;
				displayVal = '0';
				displayValElement.innerText = displayVal;
				evalStringArray.push(pendingVal);
				evalStringArray.push('-');
				break;

			case 'x':
				pendingVal = displayVal;
				displayVal = '0';
				displayValElement.innerText = displayVal;
				evalStringArray.push(pendingVal);
				evalStringArray.push('*');
				break;

			case '÷':
				pendingVal = displayVal;
				displayVal = '0';
				displayValElement.innerText = displayVal;
				evalStringArray.push(pendingVal);
				evalStringArray.push('/');
				break;

			case '=':
				evalStringArray.push(displayVal);
				let evaluation = eval(evalStringArray.join(' '));
				displayVal = evaluation + '';
				displayValElement.innerText = displayVal;
				evalStringArray = [];
				break;

		}
	}

	calcNumBtns.forEach(it => it.addEventListener('click', updateDisplayVal, false))
	calcOperatorBtns.forEach(it => it.addEventListener('click', perfomOperation, false))

	clearBtn.onclick = () => {
		displayVal = '0';
		pendingVal = undefined;
		evalStringArray = [];
		displayValElement.innerHTML = displayVal;
	}
	backspaceBtn.onclick = () => {
		let lengthOfDisplayVal = displayVal.length;
		displayVal = displayVal.slice(0, lengthOfDisplayVal - 1);

		if (displayVal === '') displayVal = '0';

		displayValElement.innerText = displayVal;
	}
	decimalBtn.onclick = () => {
		if (!displayVal.includes('.')) displayVal += '.';
	}
})();


// SNAKE

let snakeIsOn = false;
let snakeIsRepeat = false

$$('.btn-compl-snake').forEach(function (item, i, arr) {

	item.addEventListener('click', function (e) {
		if (!snakeIsOn) {

			let speedSnake = 0;

			if (e.target.classList.contains('easy')) speedSnake = 275;
			if (e.target.classList.contains('normal')) speedSnake = 225;
			if (e.target.classList.contains('hard')) speedSnake = 150;

			dirScroll($('.snake-main'), 150);

			arr.forEach(it => it.classList.remove('btn-pressed-snake'))

			item.classList.add('btn-pressed-snake');

			document.onkeydown = function (e) {
				if ([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {
					e = e || window.event;
					if (e.preventDefault) e.preventDefault();
					e.returnValue = false;
					return false;
				}
			}

			if (snakeIsRepeat) {
				snakeGame.remove();
				snakeGame.create();
			}

			snakeGame.start(speedSnake);
			snakeIsOn = true;
		}
	})
})


class Snake {

	constructor() { }

	create() {
		// creating field
		let field = document.createElement('div');
		$('.snake-main').appendChild(field);
		field.classList.add('field-snake');

		for (let i = 1; i < 101; i++) {
			let excel = document.createElement('div');
			field.appendChild(excel);
			excel.classList.add('excel-snake');
		}

		let excel = $$('.excel-snake');
		let x = 1,
			y = 10;

		for (let i = 0; i < excel.length; i++) {
			if (x > 10) {
				x = 1;
				y--;
			}
			excel[i].setAttribute('posx-Snake', x);
			excel[i].setAttribute('posy-Snake', y);
			x++;
		}


		//creating snake
		function generateSnake() {
			let posX = Math.round(Math.random() * (10 - 3) + 3);
			let posY = Math.round(Math.random() * (10 - 1) + 1);
			return [posX, posY];
		}

		let coordinates = generateSnake();
		this._snakeBody = [$('[posx-Snake = "' + coordinates[0] +
			'"][posy-Snake = "' + coordinates[1] + '"]'),
		$('[posx-Snake = "' + (coordinates[0] - 1) + '"][posy-Snake = "' + coordinates[1] + '"]'),
		$('[posx-Snake = "' + (coordinates[0] - 2) + '"][posy-Snake = "' + coordinates[1] + '"]')];

		let snakeBody = this._snakeBody;

		for (let i = 0; i < snakeBody.length; i++) snakeBody[i].classList.add('snakeBody');

		snakeBody[0].classList.add('head');

		let mouse;

		function createMouse() {
			function generateMouse() {
				let posX = Math.round(Math.random() * (10 - 3) + 3);
				let posY = Math.round(Math.random() * (10 - 1) + 1);
				return [posX, posY];
			}

			let mouseCoordinates = generateMouse();
			mouse = $('[posx-Snake = "' + mouseCoordinates[0] +
				'"][posy-Snake = "' + mouseCoordinates[1] + '"]');

			while (mouse.classList.contains('snakeBody')) {
				let mouseCoordinates = generateMouse();
				mouse = $('[posx-Snake = "' + mouseCoordinates[0] +
					'"][posy-Snake = "' + mouseCoordinates[1] + '"]');
			}
			mouse.classList.add('mouse');
		}

		createMouse();

		this._mouse = mouse;
	}

	remove = () => $('.field-snake').remove();

	start(speed) {

		let snakeBody = this._snakeBody;
		let mouse = this._mouse;

		// creating Move
		let direction = 'right';
		let steps = false;

		function createMouse() {
			function generateMouse() {
				let posX = Math.round(Math.random() * (10 - 3) + 3);
				let posY = Math.round(Math.random() * (10 - 1) + 1);
				return [posX, posY];
			}

			let mouseCoordinates = generateMouse();
			mouse = $('[posx-Snake = "' + mouseCoordinates[0] + '"][posy-Snake = "' + mouseCoordinates[1] + '"]');

			while (mouse.classList.contains('snakeBody')) {
				let mouseCoordinates = generateMouse();
				mouse = $('[posx-Snake = "' + mouseCoordinates[0] + '"][posy-Snake = "' + mouseCoordinates[1] + '"]');
			}
			mouse.classList.add('mouse');
		}

		let input = $('.input-snake')
		let score = 0;
		language == 'ru' ? input.value = `Ваш счет: ${score}` : input.value = `Your score: ${score}`

		function move() {
			let snakeCoordinates = [snakeBody[0].getAttribute('posx-Snake'),
			snakeBody[0].getAttribute('posy-Snake')];
			snakeBody[0].classList.remove('head');
			snakeBody[snakeBody.length - 1].classList.remove('snakeBody');
			snakeBody.pop();

			if (direction == 'right') {
				if (snakeCoordinates[0] < 10) {
					snakeBody.unshift($('[posx-Snake = "' + (+snakeCoordinates[0] + 1) +
						'"][posy-Snake = "' + snakeCoordinates[1] + '"]'));
				} else {
					snakeBody.unshift($('[posx-Snake = "1"][posy-Snake = "' + snakeCoordinates[1] + '"]'));
				}
			} else if (direction == 'left') {
				if (snakeCoordinates[0] > 1) {
					snakeBody.unshift($('[posx-Snake = "' + (+snakeCoordinates[0] - 1) +
						'"][posy-Snake = "' + snakeCoordinates[1] + '"]'));
				} else {
					snakeBody.unshift($('[posx-Snake = "10"][posy-Snake = "' + snakeCoordinates[1] + '"]'));
				}
			} else if (direction == 'up') {
				if (snakeCoordinates[1] < 10) {
					snakeBody.unshift($('[posx-Snake = "' + snakeCoordinates[0] +
						'"][posy-Snake = "' + (+snakeCoordinates[1] + 1) + '"]'));
				} else {
					snakeBody.unshift($('[posx-Snake = "' + snakeCoordinates[0] + '"][posy-Snake = "1"]'));
				}
			} else if (direction == 'down') {
				if (snakeCoordinates[1] > 1) {
					snakeBody.unshift($('[posx-Snake = "' + snakeCoordinates[0] +
						'"][posy-Snake = "' + (snakeCoordinates[1] - 1) + '"]'));
				} else {
					snakeBody.unshift($('[posx-Snake = "' + snakeCoordinates[0] + '"][posy-Snake = "10"]'));
				}
			}

			if (snakeBody[0].getAttribute('posx-Snake') == mouse.getAttribute('posx-Snake') &&
				snakeBody[0].getAttribute('posy-Snake') == mouse.getAttribute('posY-Snake')) {
				mouse.classList.remove('mouse');
				let a = snakeBody[snakeBody.length - 1].getAttribute('posx-Snake');
				let b = snakeBody[snakeBody.length - 1].getAttribute('posy-Snake');
				snakeBody.push($('[posx-Snake = "' + a + '"][posy-Snake = "' + b + '"]'));
				createMouse();
				score++;
				if (language == 'ru') input.value = `Ваш счёт: ${score}`;
				if (language == 'en') input.value = `Your score: ${score}`;
			}

			if (snakeBody[0].classList.contains('snakeBody')) {
				setTimeout(() => {
					if (language == 'ru') alert(` Игра окончена. Ваш счёт: ${score}`);
					if (language == 'en') alert(` Game over. Your score: ${score}`);
				}, 300);
				clearInterval(interval);
				snakeBody[0].style.background = 'url(img/_src/snakeDead.jpg) center no-repeat';
				snakeBody[0].style.backgroundSize = 'cover';

				document.onkeydown = null;

				snakeIsOn = false;
				snakeIsRepeat = true;
			}

			snakeBody[0].classList.add('head');
			for (let i = 0; i < snakeBody.length; i++) snakeBody[i].classList.add('snakeBody')

			steps = true;
		}

		let interval = setInterval(move, speed);


		window.addEventListener('keydown', function (e) {
			if (steps == true) {
				if (e.keyCode == 37 && direction != 'right') {
					direction = 'left';
					steps = false;
				}
				else if (e.keyCode == 38 && direction != 'down') {
					direction = 'up';
					steps = false;
				}
				else if (e.keyCode == 39 && direction != 'left') {
					direction = 'right';
					steps = false;
				}
				else if (e.keyCode == 40 && direction != 'up') {
					direction = 'down';
					steps = false;
				}
			}
		});
	}
}

let snakeGame = new Snake;

snakeGame.create();


// CLOTH

function clothSimulation() {
	window.requestAnimFrame =
		window.requestAnimationFrame ||
		window.webkitRequestAnimationFrame ||
		window.mozRequestAnimationFrame ||
		window.oRequestAnimationFrame ||
		window.msRequestAnimationFrame ||
		function (callback) {
			window.setTimeout(callback, 1e3 / 60)
		}

	let accuracy = 5
		, gravity = 400
		, clothY = 24
		, clothX = 50
		, spacing = 8
		, tearDist = 60
		, friction = 0.99
		, bounce = 0.5

	let canvas = $('.canvas')
	let ctx = canvas.getContext('2d')

	canvas.width = Math.min(550, window.innerWidth)
	canvas.height = 400

	ctx.strokeStyle = '#fff'

	let mouse = {
		cut: 8,
		influence: 36,
		down: false,
		button: 1,
		x: 0,
		y: 0,
		px: 0,
		py: 0
	}

	class Point {
		constructor(x, y) {
			this.x = x
			this.y = y
			this.px = x
			this.py = y
			this.vx = 0
			this.vy = 0
			this.pinX = null
			this.pinY = null

			this.constraints = []
		}

		update(delta) {
			if (this.pinX && this.pinY) return this

			if (mouse.down) {
				let dx = this.x - mouse.x
				let dy = this.y - mouse.y
				let dist = Math.sqrt(dx * dx + dy * dy)

				if (mouse.button === 1 && dist < mouse.influence) {
					this.px = this.x - (mouse.x - mouse.px)
					this.py = this.y - (mouse.y - mouse.py)
				} else if (dist < mouse.cut) {
					this.constraints = []
				}
			}

			this.addForce(0, gravity)

			let nx = this.x + (this.x - this.px) * friction + this.vx * delta
			let ny = this.y + (this.y - this.py) * friction + this.vy * delta

			this.px = this.x
			this.py = this.y

			this.x = nx
			this.y = ny

			this.vy = this.vx = 0

			if (this.x >= canvas.width) {
				this.px = canvas.width + (canvas.width - this.px) * bounce
				this.x = canvas.width
			} else if (this.x <= 0) {
				this.px *= -1 * bounce
				this.x = 0
			}

			if (this.y >= canvas.height) {
				this.py = canvas.height + (canvas.height - this.py) * bounce
				this.y = canvas.height
			} else if (this.y <= 0) {
				this.py *= -1 * bounce
				this.y = 0
			}

			return this
		}

		draw() {
			let i = this.constraints.length
			while (i--) this.constraints[i].draw()
		}

		resolve() {
			if (this.pinX && this.pinY) {
				this.x = this.pinX
				this.y = this.pinY
				return
			}

			this.constraints.forEach((constraint) => constraint.resolve())
		}

		attach = point => this.constraints.push(new Constraint(this, point))

		free = constraint => this.constraints.splice(this.constraints.indexOf(constraint), 1)

		addForce(x, y) {
			this.vx += x
			this.vy += y
		}

		pin(pinx, piny) {
			this.pinX = pinx
			this.pinY = piny
		}
	}

	class Constraint {
		constructor(p1, p2) {
			this.p1 = p1
			this.p2 = p2
			this.length = spacing
		}

		resolve() {
			let dx = this.p1.x - this.p2.x
			let dy = this.p1.y - this.p2.y
			let dist = Math.sqrt(dx * dx + dy * dy)

			if (dist < this.length) return

			let diff = (this.length - dist) / dist

			if (dist > tearDist) this.p1.free(this)

			let mul = diff * 0.5 * (1 - this.length / dist)

			let px = dx * mul
			let py = dy * mul

			!this.p1.pinX && (this.p1.x += px)
			!this.p1.pinY && (this.p1.y += py)
			!this.p2.pinX && (this.p2.x -= px)
			!this.p2.pinY && (this.p2.y -= py)

			return this
		}

		draw() {
			ctx.moveTo(this.p1.x, this.p1.y)
			ctx.lineTo(this.p2.x, this.p2.y)
		}
	}

	class Cloth {
		constructor(free) {
			this.points = []

			let startX = canvas.width / 2 - clothX * spacing / 2

			for (let y = 0; y <= clothY; y++) {
				for (let x = 0; x <= clothX; x++) {
					let point = new Point(startX + x * spacing, 20 + y * spacing)
					!free && y === 0 && point.pin(point.x, point.y)
					x !== 0 && point.attach(this.points[this.points.length - 1])
					y !== 0 && point.attach(this.points[x + (y - 1) * (clothX + 1)])

					this.points.push(point)
				}
			}
		}

		update(delta) {
			let i = accuracy

			while (i--) {
				this.points.forEach((point) => {
					point.resolve()
				})
			}

			ctx.beginPath()
			this.points.forEach((point) => point.update(delta * delta).draw())
			ctx.stroke();
		}
	}

	function setMouse(e) {
		let rect = canvas.getBoundingClientRect()
		mouse.px = mouse.x
		mouse.py = mouse.y
		mouse.x = e.clientX - rect.left
		mouse.y = e.clientY - rect.top
	}

	canvas.onmousedown = (e) => {
		mouse.button = e.which
		mouse.down = true
		setMouse(e)
	}

	canvas.onmousemove = setMouse

	canvas.onmouseup = () => (mouse.down = false)

	canvas.oncontextmenu = e => e.preventDefault()

	let cloth = new Cloth()

	function zeroG() {
		gravity = 0
		cloth = new Cloth(true)
	}

	(function update(time) {
		ctx.clearRect(0, 0, canvas.width, canvas.height)
		cloth.update(0.016)
		window.requestAnimFrame(update)
	})(0)
}

clothSimulation();

// cloth repeat

$('.btn-compl-cloth').onclick = function () {
	let canv = $('.canvas').cloneNode();
	$('.canvas').remove();
	$('.canvas-place').appendChild(canv)
	clothSimulation();
}


// disable select
$('.tetris-section').onselectstart = () => false;
$('.cloth-section').onselectstart = () => false;
$('.calculator-section').onselectstart = () => false;
$('.snake-section').onselectstart = () => false;


// google interview
function substr2(str1, str2) {
	let larger, smaller, largerLength, smallerLength;
	if (str1.length >= str2.length) {
		larger = str1;
		smaller = str2;
	} else {
		larger = str2;
		smaller = str1;
	}

	largerLength = larger.length;
	smallerLength = smaller.length;

	let matrix = Array.from({ length: smallerLength + 1 },
		() => Array.from({ length: largerLength + 1 }, () => 0))
	let num = 0;

	for (let row = 1; row < matrix.length; row++) {
		for (let col = 1; col < matrix[row].length; col++) {

			if (larger[col - 1] == smaller[row - 1]) {
				matrix[row][col] = matrix[row - 1][col - 1] + 1;
			} else {
				matrix[row][col] = Math.max(matrix[row][col - 1], matrix[row - 1][col]);
			}
		}
	}

	let traceResult = [];

	(function tracer(row, col) {
		if (matrix[row][col] === 0) return;
		if (matrix[row][col] === matrix[row][col - 1]) tracer(row, col - 1);
		if (matrix[row][col] === matrix[row - 1][col]) tracer(row - 1, col);
		if (matrix[row][col] === matrix[row - 1][col - 1] + 1) {
			traceResult.push(larger[col - 1]);
			tracer(row - 1, col - 1);
		}
	})(smallerLength, largerLength);

	return (traceResult.reverse().join(''))
}

$('.output-google').value = substr2('AGGTABBPOB', 'GXTXAYBQAB');

$('.btn-compl-google').onclick = function () {
	let arg1 = $('.google-input-1').value;
	let arg2 = $('.google-input-2').value;
	$('.output-google').value = substr2(arg1, arg2);
}


// lighting

let lighting = () => {
	const TWO_PI = 2 * Math.PI;

	const canvas = document.createElement('canvas');
	canvas.classList.add('light')
	const ctx = canvas.getContext('2d');

	let w = canvas.width = $('.lightning-section .container').clientWidth - 150;

	// if (innerWidth > 1200) {
	// 	let w = canvas.width = 1144;
	// }

	let h = canvas.height = w / 16 * 9;
	let canvasColor = '#000';

	let mx = 0;
	let my = 0;
	let toggle = 0;
	let circles = []
	let circlesCount = 3;
	const stepLength = 2;
	const maxOffset = 6;
	let maxLength = 700;

	class Circle {
		constructor(x, y) {
			this.x = x || Math.random() * w;
			this.y = y || Math.random() * h;
		}

		draw(x, y) {
			this.x = x || this.x;
			this.y = y || this.y;

			ctx.lineWidth = 1;
			ctx.fillStyle = 'white';
			ctx.strokeStyle = 'white';

			ctx.beginPath();
			ctx.arc(this.x, this.y, 6, 0, TWO_PI);
			ctx.closePath();
			ctx.fill();

			ctx.beginPath();
			ctx.arc(this.x, this.y, 28, 0, TWO_PI);
			ctx.closePath();
			ctx.stroke();
		}
	}

	function createLightning() {
		for (let a = 0; a < circles.length; a++) {
			for (let b = a + 1; b < circles.length; b++) {
				let dist = getDistance(circles[a], circles[b]);
				let chance = dist / maxLength;
				if (chance > Math.random()) continue;

				let stepsCount = dist / stepLength;
				let sx = circles[a].x;
				let sy = circles[a].y;

				ctx.lineWidth = 2.5;
				ctx.strokeStyle = 'aqua';

				ctx.beginPath();
				ctx.moveTo(circles[a].x, circles[a].y);

				for (let j = stepsCount; j > 1; j--) {

					let pathLength = getDistance(circles[a], { x: sx, y: sy });
					let offset = Math.sin(pathLength / dist * Math.PI) * maxOffset;

					sx += (circles[b].x - sx) / j + Math.random() * offset * 2 - offset;
					sy += (circles[b].y - sy) / j + Math.random() * offset * 2 - offset;
					ctx.lineTo(sx, sy);
				}

				ctx.stroke();
			}
		}
	}

	getDistance = (a, b) => Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));

	canvas.onmousemove = e => {
		mx = e.x - canvas.getBoundingClientRect().x;
		my = e.y - canvas.getBoundingClientRect().y;
	}

	window.onkeydown = () => toggle == circles.length - 1 ? toggle = 0 : toggle++;

	function init() {
		canvas.style.background = canvasColor;
		$('.lightning').appendChild(canvas);

		for (let i = 0; i < circlesCount; i++) circles.push(new Circle());

	}

	function loop() {
		ctx.clearRect(0, 0, w, h);

		createLightning();
		circles.map(i => i == circles[toggle] ? i.draw(mx, my) : i.draw());

		requestAnimationFrame(loop);
	}

	init();
	loop();

}

lighting();

// CODER
(function () {
	// ENCODER
	let mainSet = new Set;
	let mainObj = {};
	let mainArr = []

	for (let y = 0; mainSet.size < 1104 * 3; y++) {
		let arr = [];
		const randomLength = 5 + (y % 3);

		for (let i = 0; i < randomLength; i++) {
			let rand = y + (i * 4)
			if (rand % 2 == 0) rand = rand * 6;
			if (rand % 2 == 1) rand = rand * 2;
			arr.push(rand)
		}

		mainSet.add(arr.join(''));
		mainObj[arr.join('')] = y;
	}

	mainSet.forEach(it => mainArr.push(it));

	$('.encoder-get').onclick = (() => {
		let output = []
		let input = $('.encoder-input').value.split('');

		input.forEach((it, i) => {
			indexInMainArray = (it.charCodeAt()) * 3 + Math.floor(Math.random() * 3 + 1);
			output.push(mainArr[indexInMainArray - 1]);
		})

		$('.encoder-output').value = output.join('')
	})


	// DECODER
	$('.decoder-get').onclick = (() => decoder());
	let output = [];

	decoder = () => {
		const input = $('.encoder-output').value.split('');
		let check = [];
		output = [];

		input.forEach(it => {
			check.push(it);

			if (mainObj[check.join('')]) {
				let letterKey = Math.floor(mainObj[check.join('')] / 3);
				output.push(String.fromCharCode(letterKey))
				check = [];
				return
			}
		})

		$('.decoder-input').value = output.join('');
	}
})();


